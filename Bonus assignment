/* 1) The code didnâ€™t provide a way to cleanup the memory allocated when
makenull is called. Try to resolve this issue.*/

void DoublyListMakeNull() {
    Node* current = head;
    while (current != nullptr) {
        Node* temp = curr;
        curr = curr->next;
        delete temp;
    }
    head = nullptr;
    tail = nullptr;
    counter = 0;
}


//-------------------------------------------------------------------------

/* 2) Modify the Linked List implementation to
store item sorted (in ascending order) Singly */


#include <iostream>
using namespace std;


struct Node {
    int data;
    Node* next;
};

class singlySortedList {
private:
    Node* head;
    Node* tail;
    int length;
public:
    singlySortedList() {
        head = tail = nullptr;
        length = 0;

    }
    bool isEmpty() {
        return (length == 0);
    }

    void insertSorted(int data) {
        Node* newNode = new Node;
        newNode->data = data;
        newNode->next = nullptr;

        if (head == nullptr || data < head->data) {
            newNode->next = head;
            head = newNode;
            if (tail == nullptr) {
                tail = newNode;
            }
            length++;
            return;
        }


        Node* current = head;
        while (current->next != nullptr && current->next->data < data) {
            current = current->next;
        }

        newNode->next = current->next;
        current->next = newNode;

        if (newNode->next == nullptr) {
            tail = newNode;
        }

        length++;
    }


    void printList() {
        if (isEmpty()) {
            cout << " The list is Empty" << endl;
            return;
        }

        Node* current = head;
        while (current != nullptr) {
            cout << current->data << " -> ";
            current = current->next;
        }

        cout << "NULL" << endl;
    }

};

using namespace std;

int main()
{
    cout << "-----------------------------" << endl;
    cout << " Singly Linked List Sorted " << endl;
    cout << "-----------------------------" << endl;
    singlySortedList List;
    List.insertSorted(50);
    List.insertSorted(100);
    List.insertSorted(11);
    List.insertSorted(3);
    List.insertSorted(46);
    List.insertSorted(6);
    List.insertSorted(66);
    List.insertSorted(85);
    List.insertSorted(30);
    List.insertSorted(41);
    List.printList();
}


/* 3) Modify the Linked List implementation to 
store item sorted (in ascending order) Doubly */

//_____________________________________________________________________________


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
};

class doublySortedList {
private:
    Node* head;
    Node* tail;
    int length;
public:
    doublySortedList() {
        head = tail = nullptr;
        length = 0;
    }

    bool isEmpty() {
        return (head == nullptr);
    }


void insertSorted(int data) {
    Node* newNode = new Node;
    newNode -> data = data;
    newNode -> next = nullptr;
    newNode -> prev = nullptr;


     if (isEmpty()) {
            head = tail = newNode;
            return;
        }

     if( data < head-> data){
        newNode -> next = head;
        head -> prev = newNode;
        head = newNode;
        length++;
        return;
     }

     Node* current = head;
     while(current -> next != nullptr && current -> next -> data < data){
        current = current -> next;
     }

     newNode -> next = current -> next;
     newNode -> prev = current;
     current -> next = newNode;


if (newNode->next != nullptr) {
        newNode->next->prev = newNode;
    } else {
        tail = newNode;
    }
length++;
}


   void printList(){
    Node* current = head;
    while(current != nullptr){
        cout << current -> data << " -> " ;
        current = current -> next;
    }

     cout << "NULL" << endl;
    }

};

int main()
{
    cout<<"-----------------------------"<<endl;
    cout<<" Doubly Linked List Sorted "<<endl;
    cout<<"-----------------------------"<<endl;
    doublySortedList List;
    List.insertSorted(50);
    List.insertSorted(100);
    List.insertSorted(11);
    List.insertSorted(3);
    List.insertSorted(46);
    List.insertSorted(6);
    List.insertSorted(66);
    List.insertSorted(85);
    List.insertSorted(30);
    List.insertSorted(41);
    List.printList();
}

